"""
SQLAlchemy ORM schema definitions for the AVA metadata database.

Implements a four-table relational structure (Recording, Syllable, Embedding, Annotation)
that indexes existing HDF5 spectrogram files and NPY embeddings without storing bulk array data.
Enforces strict foreign key constraints with CASCADE delete behavior to prevent orphan records
and maintains referential integrity across all tables.

The schema follows a fail-loud philosophy where any integrity violation raises RuntimeError
immediately, ensuring corrupted metadata cannot enter analysis workflows.
"""

from datetime import datetime
from typing import Any

from sqlalchemy import Column, Integer, String, Float, DateTime, ForeignKey, JSON, create_engine
from sqlalchemy.orm import declarative_base, relationship


# SQLAlchemy declarative base for all model definitions
Base = declarative_base()


class Recording(Base):
    """
    Recording model representing audio files with metadata and integrity validation.
    
    Stores references to original audio files with SHA-256 checksums for integrity
    verification. Each recording can contain multiple syllables extracted during
    segmentation processing.
    """
    __tablename__ = 'recording'
    
    id: int = Column(Integer, primary_key=True, autoincrement=True)
    file_path: str = Column(String, unique=True, nullable=False)
    checksum_sha256: str = Column(String(64), nullable=False)
    created_at: datetime = Column(DateTime, default=datetime.now, nullable=False)
    metadata: dict[str, Any] = Column(JSON, nullable=True)
    
    # Relationship with CASCADE delete behavior
    syllables = relationship("Syllable", back_populates="recording", cascade="all, delete-orphan")


class Syllable(Base):
    """
    Syllable model representing segmented audio units with spectrogram references.
    
    Each syllable corresponds to a detected vocalization unit with temporal bounds
    and references to processed spectrogram data stored in HDF5 format.
    """
    __tablename__ = 'syllable'
    
    id: int = Column(Integer, primary_key=True, autoincrement=True)
    recording_id: int = Column(Integer, ForeignKey('recording.id', ondelete='CASCADE'), nullable=False)
    spectrogram_path: str = Column(String, nullable=False)
    start_time: float = Column(Float, nullable=False)
    end_time: float = Column(Float, nullable=False)
    bounds_metadata: dict[str, Any] = Column(JSON, nullable=True)
    
    # Relationships with CASCADE delete behavior
    recording = relationship("Recording", back_populates="syllables")
    embeddings = relationship("Embedding", back_populates="syllable", cascade="all, delete-orphan")
    annotations = relationship("Annotation", back_populates="syllable", cascade="all, delete-orphan")


class Embedding(Base):
    """
    Embedding model representing neural network-derived feature vectors.
    
    Stores references to NPY files containing embedding vectors generated by
    VAE models, with model version tracking for reproducibility.
    """
    __tablename__ = 'embedding'
    
    id: int = Column(Integer, primary_key=True, autoincrement=True)
    syllable_id: int = Column(Integer, ForeignKey('syllable.id', ondelete='CASCADE'), nullable=False)
    model_version: str = Column(String, nullable=False)
    embedding_path: str = Column(String, nullable=False)
    dimensions: int = Column(Integer, nullable=False)
    model_metadata: dict[str, Any] = Column(JSON, nullable=True)
    
    # Relationship with parent syllable
    syllable = relationship("Syllable", back_populates="embeddings")


class Annotation(Base):
    """
    Annotation model for flexible key-value metadata storage.
    
    Provides extensible annotation system for storing labels, quality metrics,
    and analysis results associated with syllables.
    """
    __tablename__ = 'annotation'
    
    id: int = Column(Integer, primary_key=True, autoincrement=True)
    syllable_id: int = Column(Integer, ForeignKey('syllable.id', ondelete='CASCADE'), nullable=False)
    annotation_type: str = Column(String, nullable=False)
    key: str = Column(String, nullable=False)
    value: str = Column(String, nullable=False)
    created_at: datetime = Column(DateTime, default=datetime.now, nullable=False)
    
    # Relationship with parent syllable
    syllable = relationship("Syllable", back_populates="annotations")